#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("my-event-back:server");
var http = require("http");
const socketIo = require("socket.io");
const jwt = require("jsonwebtoken");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Set up Socket.IO server and JWT auth
 */
const io = socketIo(server, {
  cors: {
    origin: "*", // Change for production
    methods: ["GET", "POST"],
  },
});
const { setSocketIo } = require("../services/socketService");
setSocketIo(io);

// JWT auth for Socket.IO
io.use((socket, next) => {
  const token = socket.handshake.auth?.token;
  if (!token) return next(new Error("Authentication error"));
  try {
    const payload = jwt.verify(token, "YOUR_SECRET_KEY"); // CHANGE SECRET!
    socket.user = payload;
    next();
  } catch (err) {
    next(new Error("Authentication error"));
  }
});

io.on("connection", (socket) => {
  socket.join(socket.user.id); // Join a room named by the user ID
  console.log("User connected:", socket.user.id);

  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.user.id);
  });
});

/**
 * Socket Service Integration
 * This makes the io instance available to other modules (e.g., notificationService)
 */
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + bind);
}